import {
  __publicField
} from "./chunk-JEXKZRFY.js";

// node_modules/laravel-permission-to-vuejs/index.js
var LaravelPermissionToVue = class {
  constructor() {
    __publicField(this, "is", function(value) {
      if (window.Laravel.jsPermissions == 0)
        return false;
      let roles = window.Laravel.jsPermissions.roles;
      let _return = false;
      if (!Array.isArray(roles)) {
        return false;
      }
      if (value.includes("|")) {
        value.split("|").forEach(function(item) {
          if (roles.includes(item.trim())) {
            _return = true;
          }
        });
      } else if (value.includes("&")) {
        _return = true;
        value.split("&").forEach(function(item) {
          if (!roles.includes(item.trim())) {
            _return = false;
          }
        });
      } else {
        _return = roles.includes(value.trim());
      }
      return _return;
    });
    __publicField(this, "can", function(value) {
      if (window.Laravel.jsPermissions == 0)
        return false;
      let permissions = window.Laravel.jsPermissions.permissions;
      let _return = false;
      if (!Array.isArray(permissions)) {
        return false;
      }
      if (value.includes("|")) {
        value.split("|").forEach(function(item) {
          if (permissions.includes(item.trim())) {
            _return = true;
          }
        });
      } else if (value.includes("&")) {
        _return = true;
        value.split("&").forEach(function(item) {
          if (!permissions.includes(item.trim())) {
            _return = false;
          }
        });
      } else {
        _return = permissions.includes(value.trim());
      }
      return _return;
    });
    __publicField(this, "reloadRolesAndPermissions", async function(route = "/get-laravel-permission-to-vuejs") {
      await axios.get(route).then(
        (response) => {
          window.Laravel.jsPermissions = response.data;
        }
      );
    });
  }
};
var lp = new LaravelPermissionToVue();
var laravel_permission_to_vuejs_default = {
  install: (app, options) => {
    app.config.globalProperties.can = lp.can;
    app.config.globalProperties.is = lp.is;
  }
};
var is = lp.is;
var can = lp.can;
var reloadRolesAndPermissions = lp.reloadRolesAndPermissions;
window.Laravel = window.Laravel || {};
window.Laravel.jsPermissions = window.Laravel.jsPermissions || { permissions: [], roles: [] };
export {
  can,
  laravel_permission_to_vuejs_default as default,
  is,
  reloadRolesAndPermissions
};
//# sourceMappingURL=laravel-permission-to-vuejs.js.map
